/*
 *
 * Copyright SHMsoft, Inc. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.freeeed.ui;

import com.xerox.amazonws.ec2.EC2Exception;
import org.freeeed.ec2.Cluster;
import org.freeeed.ec2.EC2Agent;
import org.freeeed.ec2.HadoopAgent;
import org.freeeed.helpers.ControlUIHelper;
import org.freeeed.services.Settings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;


/**
 * @author mark
 */
public class ClusterControlUI extends javax.swing.JDialog implements ControlUIHelper {
    private static final Logger logger = LoggerFactory.getLogger(ClusterControlUI.class);
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form ClusterControlUI
     */
    public ClusterControlUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = rootPane.getActionMap();
        actionMap.put(cancelName, new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        clusterStatusLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clusterStatusText = new javax.swing.JTextArea();
        refreshButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        browseStorageButton = new javax.swing.JButton();
        browseJobsButton = new javax.swing.JButton();
        checkButton = new javax.swing.JButton();

        setTitle("Cluster control");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        clusterStatusLabel.setText("Cluster status");

        clusterStatusText.setColumns(20);
        clusterStatusText.setFont(new java.awt.Font("Courier New", 0, 15)); // NOI18N
        clusterStatusText.setRows(5);
        jScrollPane1.setViewportView(clusterStatusText);

        refreshButton.setText("Refresh");
        refreshButton.setToolTipText("Show running cluster instances");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        startButton.setText("Start");
        startButton.setToolTipText("Start a new Hadoop cluster");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.setToolTipText("Stop the current Hadoop cluster");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        browseStorageButton.setText("Browse storage");
        browseStorageButton.setToolTipText("Open a web browser to the HDFS file system on the cluster");
        browseStorageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseStorageButtonActionPerformed(evt);
            }
        });

        browseJobsButton.setText("Browse jobs");
        browseJobsButton.setToolTipText("Open a browser to the record of Hadoop jobs run on the cluster");
        browseJobsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseJobsButtonActionPerformed(evt);
            }
        });

        checkButton.setText("Check");
        checkButton.setToolTipText("Check the status of the cluster");
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(checkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, Short.MAX_VALUE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(clusterStatusLabel)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(browseStorageButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(browseJobsButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[]{refreshButton, startButton, stopButton});

        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(clusterStatusLabel)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane1)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(browseStorageButton)
                                                        .addComponent(browseJobsButton)
                                                        .addComponent(okButton))
                                                .addContainerGap())
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(refreshButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(startButton)
                                                .addGap(17, 17, 17)
                                                .addComponent(stopButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(checkButton)
                                                .addGap(0, 91, Short.MAX_VALUE))))
        );

        rootPane.setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        refreshStatus();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        startCluster();
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        terminateCluster();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void browseStorageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseStorageButtonActionPerformed
        openHdfsBrowser();
    }//GEN-LAST:event_browseStorageButtonActionPerformed

    private void browseJobsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseJobsButtonActionPerformed
        openJobBrowser();
    }//GEN-LAST:event_browseJobsButtonActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        checkCluster();
    }//GEN-LAST:event_checkButtonActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseJobsButton;
    private javax.swing.JButton browseStorageButton;
    private javax.swing.JButton checkButton;
    private javax.swing.JLabel clusterStatusLabel;
    private javax.swing.JTextArea clusterStatusText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    @Override
    public void refreshStatus() {
        new Thread(new StatusRefresher()).start();
    }

    public class StatusRefresher implements Runnable {

        private String status;

        @Override
        public void run() {
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    clusterStatusText.setText("Querying EC2, please wait...");
                }
            });
            EC2Agent agent = new EC2Agent();
            status = "Cluster status:\nUnknown";
            try {
                status = agent.describeRunningInstances();
                if (agent.getRunningInstances(true).size() == Settings.getSettings().getClusterSize()) {
                    status += "\n\n" + agent.getClusterState();
                }
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                public void run() {
                    clusterStatusText.setText(status);
                }
            });
        }
    }

    @Override
    public void setVisible(boolean b) {
        if (b) {
            refreshStatus();
        }
        super.setVisible(b);
    }

    private void startCluster() {
        logger.info("Starting a cluster of {} nodes", Settings.getSettings().getClusterSize());
        final int refreshMillis = 5000;

        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    EC2Agent agent = new EC2Agent();
                    // MK debugging, do not start cluster when working an an image
                    if (!Settings.getSettings().skipInstanceCreation()) {
                        agent.launchInstances();
                    }

                    // cluster is given the certain number of minutes to start
                    int clusterTimeoutMin = Settings.getSettings().getClusterTimeoutMin();
                    int attempts = (clusterTimeoutMin * 60 * 1000) / refreshMillis;
                    int attempt = 0;
                    while (!allInstancesUp()) {
                        ++attempt;
                        logger.trace("Check # {}", attempt);
                        logger.trace("Waiting for all instances to initialize...");
                        Thread.sleep(refreshMillis);
                        refreshStatus();
                        if (attempt > attempts) {
                            SwingUtilities.invokeLater(new Runnable() {

                                @Override
                                public void run() {
                                    JOptionPane.showMessageDialog(null, "The cluster could not be started.\n"
                                            + "Please try again at a later time.");
                                }
                            });
                            return;
                        }
                    }
                } catch (final EC2Exception | InterruptedException e) {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            e.printStackTrace(System.out);
                            JOptionPane.showMessageDialog(null, e.getMessage());
                        }
                    });

                }
                HadoopAgent.setHadoopReady(false);
                logger.info("Starting Hadoop cluster setup");
                HadoopAgent hadoopAgent = new HadoopAgent();
                hadoopAgent.setCallingUI(ClusterControlUI.this);
                hadoopAgent.setupAndStart();
            }
        }).start();
    }

    private void checkCluster() {
        logger.info("Checking cluster status");

        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    HadoopAgent hadoopAgent = new HadoopAgent();
                    // TODO if anything is even slightly wrong - throw an exception and tell the user
                    hadoopAgent.checkHealth();
                    refreshStatus();

                } catch (final Exception e) {
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            e.printStackTrace(System.out);
                            JOptionPane.showMessageDialog(null, e.getMessage());
                        }
                    });

                }
            }
        }).start();
    }

    private boolean allInstancesUp() {
        EC2Agent agent = new EC2Agent();
        Cluster cluster = agent.getRunningInstances(true);
        return cluster.size() == agent.getClusterSize()
                && cluster.getInitializedCount() == agent.getClusterSize();
    }

    private void terminateCluster() {
        logger.info("Terminating the cluster");
        try {
            EC2Agent agent = new EC2Agent();
            agent.terminateInstances();
            Thread.sleep(2000);
            refreshStatus();
        } catch (EC2Exception | InterruptedException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void openHdfsBrowser() {
        if (allInstancesUp() == false) {
            JOptionPane.showMessageDialog(this, "Sorry, cluster is not (completely) up");
        }
        try {
            EC2Agent agent = new EC2Agent();
            Cluster cluster = agent.getRunningInstances(false);
            cluster.assignRoles();
            if (cluster.getMaster() != null) {
                UtilUI.openBrowser(this, "http://" + cluster.getMaster().getDnsName() + ":50070");
            }
        } catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }

    private void openJobBrowser() {
        if (allInstancesUp() == false) {
            JOptionPane.showMessageDialog(this, "Sorry, cluster is not (completely) up");
        }
        try {
            EC2Agent agent = new EC2Agent();
            Cluster cluster = agent.getRunningInstances(false);
            cluster.assignRoles();
            if (cluster.getJobTracker() != null) {
                UtilUI.openBrowser(this, "http://" + cluster.getJobTracker().getDnsName() + ":50030");
            }
        } catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }
}
