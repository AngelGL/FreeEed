/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ProjectSettingsUI.java
 *
 * Created on Jun 29, 2011, 6:33:58 PM
 */
package org.freeeed.ui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.DefaultListModel;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.ListModel;
import org.apache.commons.configuration.Configuration;
import org.freeeed.main.FreeEedMain;
import org.freeeed.main.ParameterProcessing;

/**
 *
 * @author mark
 */
public class ProjectSettingsUI extends javax.swing.JDialog {

	/** A return status code - returned if Cancel button has been pressed */
	public static final int RET_CANCEL = 0;
	/** A return status code - returned if OK button has been pressed */
	public static final int RET_OK = 1;

	/** Creates new form ProjectSettingsUI */
	public ProjectSettingsUI(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();

		// Close the dialog when Esc is pressed
		String cancelName = "cancel";
		InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
		ActionMap actionMap = getRootPane().getActionMap();
		actionMap.put(cancelName, new AbstractAction() {

			@Override
			public void actionPerformed(ActionEvent e) {
				doClose(RET_CANCEL);
			}
		});
	}

	/** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
	public int getReturnStatus() {
		return returnStatus;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupProcessing = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        projectNameLabel = new javax.swing.JLabel();
        projectTextField = new javax.swing.JTextField();
        projectInputsLabel = new javax.swing.JLabel();
        projectInputsScrollPanel = new javax.swing.JScrollPane();
        projectInputsList = new javax.swing.JList();
        addButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        processingLabel = new javax.swing.JLabel();
        radioLocal = new javax.swing.JRadioButton();
        radioEc2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        projectNameLabel.setText("Project name");

        projectInputsLabel.setText("Project inputs");

        projectInputsScrollPanel.setViewportView(projectInputsList);

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        processingLabel.setText("Processing");

        buttonGroupProcessing.add(radioLocal);
        radioLocal.setSelected(true);
        radioLocal.setText("Local");

        buttonGroupProcessing.add(radioEc2);
        radioEc2.setText("EC2");

        buttonGroupProcessing.add(jRadioButton1);
        jRadioButton1.setText("My cluster");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(projectInputsScrollPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(projectNameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(projectTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(projectInputsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 388, Short.MAX_VALUE)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(processingLabel)
                        .addGap(30, 30, 30)
                        .addComponent(radioLocal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioEc2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton1)
                        .addContainerGap(321, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, removeButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectInputsLabel)
                    .addComponent(addButton)
                    .addComponent(removeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(projectInputsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(processingLabel)
                    .addComponent(jRadioButton1)
                    .addComponent(radioEc2)
                    .addComponent(radioLocal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
		doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

	/** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
		doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

	private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
		removeInput();
	}//GEN-LAST:event_removeButtonActionPerformed

	private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
		addInput();
	}//GEN-LAST:event_addButtonActionPerformed

	private void doClose(int retStatus) {
		returnStatus = retStatus;
		if (returnStatus == RET_OK) {
			if (collectData() == false) {
				return;
			}
		}
		setVisible(false);
		dispose();
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {

			@Override
			public void run() {
				ProjectSettingsUI dialog = new ProjectSettingsUI(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {

					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.ButtonGroup buttonGroupProcessing;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel processingLabel;
    private javax.swing.JLabel projectInputsLabel;
    private javax.swing.JList projectInputsList;
    private javax.swing.JScrollPane projectInputsScrollPanel;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JTextField projectTextField;
    private javax.swing.JRadioButton radioEc2;
    private javax.swing.JRadioButton radioLocal;
    private javax.swing.JButton removeButton;
    // End of variables declaration//GEN-END:variables
	private int returnStatus = RET_CANCEL;

	@Override
	public void setVisible(boolean b) {
		if (b) {
			showData();
		}
		super.setVisible(b);
	}

	private void showData() {
		Configuration processingParameters = FreeEedMain.getInstance().getProcessingParameters();
		if (processingParameters.containsKey(ParameterProcessing.PROJECT_FILE_NAME)) {
			setTitle(processingParameters.getString(ParameterProcessing.PROJECT_FILE_NAME));
		}
		if (processingParameters.containsKey(ParameterProcessing.PROJECT_NAME)) {
			projectTextField.setText(processingParameters.getString(ParameterProcessing.PROJECT_NAME));
		}
		DefaultListModel model = new DefaultListModel();
		String[] dirs = processingParameters.getStringArray(ParameterProcessing.PROJECT_INPUTS);
		String[] custodians = processingParameters.getStringArray(ParameterProcessing.PROJECT_CUSTODIANS);
		if (dirs != null) {
			for (int i = 0; i < dirs.length; ++i) {
				String line = custodians[i] + ": " + dirs[i];
				model.addElement(line);
			}
		}
		projectInputsList.setModel(model);

	}

	private boolean collectData() {
		Configuration processingParameters = FreeEedMain.getInstance().getProcessingParameters();
		processingParameters.setProperty(ParameterProcessing.PROJECT_NAME, projectTextField.getText());
		ListModel model = projectInputsList.getModel();		
		String[] dirs = new String[model.getSize()];
		String[] custodians = new String[model.getSize()];
		for (int i = 0; i < model.getSize(); ++i) {
			String line = (String) model.getElementAt(i);
		}
		// TODO parse and set
		processingParameters.setProperty(ParameterProcessing.PROJECT_INPUTS, dirs);
		processingParameters.setProperty(ParameterProcessing.PROJECT_CUSTODIANS, custodians);

		return true;
	}

	private void removeInput() {
		int index = projectInputsList.getSelectedIndex();
		if (index >= 0) {
			((DefaultListModel) projectInputsList.getModel()).remove(index);
		}
	}

	private void addInput() {
		JFileChooser chooser = new JFileChooser();
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		File f = null;
		try {
			f = new File(new File(".").getCanonicalPath());
		} catch (IOException e) {
			e.printStackTrace(System.out);
		}
		chooser.setCurrentDirectory(f);
		chooser.showOpenDialog(this);
		File file = chooser.getSelectedFile();
		if (file == null) {
			return;
		}
		String custodian = JOptionPane.showInputDialog("Please enter custodian");
		if (custodian == null) {
			return;
		}
		((DefaultListModel) projectInputsList.getModel()).addElement(custodian + ": " + file.getPath());
	}
}
