/*
 *
 * Copyright SHMsoft, Inc. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.freeeed.ui;

import com.xerox.amazonws.ec2.EC2Exception;
import org.freeeed.ec2.Cluster;
import org.freeeed.ec2.EC2Agent;
import org.freeeed.ec2.HadoopAgent;
import org.freeeed.helpers.ControlUIHelper;
import org.freeeed.services.Settings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.Objects;


/**
 * @author mark
 */
public class ClusterControlUI extends javax.swing.JDialog implements ControlUIHelper {
    private static final Logger LOGGER = LoggerFactory.getLogger(ClusterControlUI.class);
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form ClusterControlUI
     */
    public ClusterControlUI(Frame parent) {
        super(parent, false);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = rootPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = rootPane.getActionMap();
        actionMap.put(cancelName, new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        okButton = new JButton();
        clusterStatusLabel = new JLabel();
        jScrollPane1 = new JScrollPane();
        clusterStatusText = new JTextArea();
        refreshButton = new JButton();
        startButton = new JButton();
        stopButton = new JButton();
        browseStorageButton = new JButton();
        browseJobsButton = new JButton();
        checkButton = new JButton();

        setTitle("Cluster control");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        okButton.setText("OK");
        okButton.addActionListener(this::okButtonActionPerformed);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.ipadx = 54;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 149, 16, 15);
        getContentPane().add(okButton, gridBagConstraints);
        getRootPane().setDefaultButton(okButton);

        clusterStatusLabel.setText("Cluster status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(16, 15, 0, 0);
        getContentPane().add(clusterStatusLabel, gridBagConstraints);

        clusterStatusText.setColumns(20);
        clusterStatusText.setFont(new java.awt.Font("Courier New", 0, 15)); // NOI18N
        clusterStatusText.setRows(5);
        jScrollPane1.setViewportView(clusterStatusText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 399;
        gridBagConstraints.ipady = 165;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(18, 15, 0, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        refreshButton.setText("Refresh");
        refreshButton.setToolTipText("Show running cluster instances");
        refreshButton.addActionListener(this::refreshButtonActionPerformed);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 18, 0, 15);
        getContentPane().add(refreshButton, gridBagConstraints);

        startButton.setText("Start");
        startButton.setToolTipText("Start a new Hadoop cluster");
        startButton.addActionListener(this::startButtonActionPerformed);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 18, 0, 15);
        getContentPane().add(startButton, gridBagConstraints);

        stopButton.setText("Stop");
        stopButton.setToolTipText("Stop the current Hadoop cluster");
        stopButton.addActionListener(this::stopButtonActionPerformed);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(17, 18, 0, 15);
        getContentPane().add(stopButton, gridBagConstraints);

        browseStorageButton.setText("Browse storage");
        browseStorageButton.setToolTipText("Open a web browser to the HDFS file system on the cluster");
        browseStorageButton.addActionListener(this::browseStorageButtonActionPerformed);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 15, 16, 0);
        getContentPane().add(browseStorageButton, gridBagConstraints);

        browseJobsButton.setText("Browse jobs");
        browseJobsButton.setToolTipText("Open a browser to the record of Hadoop jobs run on the cluster");
        browseJobsButton.addActionListener(this::browseJobsButtonActionPerformed);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 18, 16, 0);
        getContentPane().add(browseJobsButton, gridBagConstraints);

        checkButton.setText("Check");
        checkButton.setToolTipText("Check the status of the cluster");
        checkButton.addActionListener(this::checkButtonActionPerformed);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(18, 18, 0, 15);
        getContentPane().add(checkButton, gridBagConstraints);

        pack();
    }

    private void okButtonActionPerformed(ActionEvent evt) {
        doClose(RET_OK);
    }

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {
        doClose(RET_CANCEL);
    }

    private void refreshButtonActionPerformed(ActionEvent evt) {
        refreshStatus();
    }

    private void startButtonActionPerformed(ActionEvent evt) {
        startCluster();
    }

    private void stopButtonActionPerformed(ActionEvent evt) {
        terminateCluster();
    }

    private void browseStorageButtonActionPerformed(ActionEvent evt) {
        openHdfsBrowser();
    }

    private void browseJobsButtonActionPerformed(ActionEvent evt) {
        openJobBrowser();
    }

    private void checkButtonActionPerformed(ActionEvent evt) {
        checkCluster();
    }

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    private JButton browseJobsButton;
    private JButton browseStorageButton;
    private JButton checkButton;
    private JLabel clusterStatusLabel;
    private JTextArea clusterStatusText;
    private JScrollPane jScrollPane1;
    private JButton okButton;
    private JButton refreshButton;
    private JButton startButton;
    private JButton stopButton;
    private int returnStatus = RET_CANCEL;

    public void refreshStatus() {
        new Thread(new StatusRefresher()).start();
    }

    public class StatusRefresher implements Runnable {

        private String status;

        @Override
        public void run() {
            SwingUtilities.invokeLater(() -> clusterStatusText.setText("Querying EC2, please wait..."));
            EC2Agent agent = new EC2Agent();
            status = "Cluster status:\nUnknown";
            try {
                status = agent.describeRunningInstances();
                if (agent.getRunningInstances(true).size() == Settings.getSettings().getClusterSize()) {
                    status += "\n\n" + agent.getClusterState();
                }
            } catch (Exception e) {
                e.printStackTrace(System.out);
            }
            SwingUtilities.invokeLater(() -> clusterStatusText.setText(status));
        }
    }

    @Override
    public void setVisible(boolean b) {
        if (b) {
            refreshStatus();
        }
        super.setVisible(b);
    }

    private void startCluster() {
        LOGGER.info("Starting a cluster of {} nodes", Settings.getSettings().getClusterSize());
        final int refreshMillis = 5000;

        new Thread(() -> {
            try {
                EC2Agent agent = new EC2Agent();
                // MK debugging, do not start cluster when working an an image
                if (!Settings.getSettings().skipInstanceCreation()) {
                    agent.launchInstances();
                }

                // cluster is given the certain number of minutes to start
                int clusterTimeoutMin = Settings.getSettings().getClusterTimeoutMin();
                int attempts = (clusterTimeoutMin * 60 * 1000) / refreshMillis;
                int attempt = 0;
                while (!allInstancesUp()) {
                    ++attempt;
                    LOGGER.trace("Check # {}", attempt);
                    LOGGER.trace("Waiting for all instances to initialize...");
                    Thread.sleep(refreshMillis);
                    refreshStatus();
                    if (attempt > attempts) {
                        SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(null, "The cluster could not be started.\n"
                                + "Please try again at a later time."));
                        return;
                    }
                }
            } catch (final EC2Exception | InterruptedException e) {
                SwingUtilities.invokeLater(() -> {
                    e.printStackTrace(System.out);
                    JOptionPane.showMessageDialog(null, e.getMessage());
                });

            }
            HadoopAgent.setHadoopReady(false);
            LOGGER.info("Starting Hadoop cluster setup");
            HadoopAgent hadoopAgent = new HadoopAgent();
            hadoopAgent.setCallingUI(ClusterControlUI.this);
            hadoopAgent.setupAndStart();
        }).start();
    }

    private void checkCluster() {
        LOGGER.info("Checking cluster status");

        new Thread(() -> {
            try {
                HadoopAgent hadoopAgent = new HadoopAgent();
                hadoopAgent.checkHealth();
                refreshStatus();

            } catch (final Exception e) {
                SwingUtilities.invokeLater(() -> {
                    e.printStackTrace(System.out);
                    JOptionPane.showMessageDialog(null, e.getMessage());
                });

            }
        }).start();
    }

    private boolean allInstancesUp() {
        EC2Agent agent = new EC2Agent();
        Cluster cluster = agent.getRunningInstances(true);
        return cluster.size() == agent.getClusterSize()
                && cluster.getInitializedCount() == agent.getClusterSize();
    }

    private void terminateCluster() {
        LOGGER.info("Terminating the cluster");
        try {
            EC2Agent agent = new EC2Agent();
            agent.terminateInstances();
            Thread.sleep(2000);
            refreshStatus();
        } catch (EC2Exception | InterruptedException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void openHdfsBrowser() {
        if (!allInstancesUp()) {
            JOptionPane.showMessageDialog(this, "Sorry, cluster is not (completely) up");
        }
        try {
            EC2Agent agent = new EC2Agent();
            Cluster cluster = agent.getRunningInstances(false);
            cluster.assignRoles();
            if (cluster.getMaster() != null) {
                UtilUI.openBrowser(this, "http://" + cluster.getMaster().getDnsName() + ":50070");
            }
        } catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }

    private void openJobBrowser() {
        if (!allInstancesUp()) {
            JOptionPane.showMessageDialog(this, "Sorry, cluster is not (completely) up");
        }
        try {
            EC2Agent agent = new EC2Agent();
            Cluster cluster = agent.getRunningInstances(false);
            cluster.assignRoles();
            if (Objects.nonNull(cluster.getJobTracker())) {
                UtilUI.openBrowser(this, "http://" + cluster.getJobTracker().getDnsName() + ":50030");
            }
        } catch (Exception ex) {
            LOGGER.error("ERROR: ", ex);
        }
    }
}
