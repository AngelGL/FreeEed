/*
 *
 * Copyright SHMsoft, Inc. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.freeeed.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import javax.swing.*;

import org.freeeed.ec2.ProcessAgent;
import org.freeeed.ec2.SSHAgent;
import org.freeeed.services.Project;
import org.freeeed.services.Stats;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author mark
 */
public class EC2ProcessUI extends javax.swing.JDialog implements ActionListener {

    private static final Logger logger = LoggerFactory.getLogger(EC2ProcessUI.class);
    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    private Thread processingThread;
    private ProcessAgent processAgent;
    private Timer timer;

    /**
     * Creates new form EC2ProcessUI
     */
    public EC2ProcessUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        uploadCheck = new javax.swing.JCheckBox();
        processCheck = new javax.swing.JCheckBox();
        downloadCheck = new javax.swing.JCheckBox();
        shutdownCheck = new javax.swing.JCheckBox();
        progressUpload = new javax.swing.JProgressBar();
        progressProcess = new javax.swing.JProgressBar();
        progressDownload = new javax.swing.JProgressBar();
        goButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        detail1Button = new javax.swing.JButton();
        progressLabel = new javax.swing.JLabel();
        detail2Button = new javax.swing.JButton();
        detail3Button = new javax.swing.JButton();

        setTitle("EC2 Processing");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        uploadCheck.setSelected(true);
        uploadCheck.setText("Upload project");

        processCheck.setSelected(true);
        processCheck.setText("Run processing");

        downloadCheck.setSelected(true);
        downloadCheck.setText("Download results");

        shutdownCheck.setText("Shut down cluster when finished");

        goButton.setText("GO!");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        detail1Button.setText("...");
        detail1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detail1ButtonActionPerformed(evt);
            }
        });

        progressLabel.setText("Progress");

        detail2Button.setText("...");
        detail2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detail2ButtonActionPerformed(evt);
            }
        });

        detail3Button.setText("...");
        detail3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detail3ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(shutdownCheck)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(stopButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uploadCheck)
                    .addComponent(processCheck)
                    .addComponent(downloadCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(progressProcess, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                            .addComponent(progressUpload, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(progressDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detail1Button)
                            .addComponent(detail3Button)
                            .addComponent(detail2Button))))
                .addGap(9, 9, 9))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(progressLabel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(detail1Button, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detail2Button, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(progressProcess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(uploadCheck)
                        .addGap(18, 18, 18)
                        .addComponent(processCheck)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(detail3Button, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(downloadCheck)
                        .addComponent(progressDownload, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(shutdownCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(stopButton)
                    .addComponent(goButton))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {progressDownload, progressProcess, progressUpload});

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        if (!verifyProject()) {
            return;
        }
        goProcessProject();
    }//GEN-LAST:event_goButtonActionPerformed

    private void detail1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detail1ButtonActionPerformed
        ProcessAgent pa = new ProcessAgent();
        String uploadPlan = "Could not get the upload plan";
        try {
            uploadPlan = pa.getUploadPlan();
        } catch (IOException e) {
            e.printStackTrace(System.out);
        }
        UploadPlanUI ui = new UploadPlanUI(null, true);
        ui.setUploadPlan(uploadPlan);
        ui.setVisible(true);
    }//GEN-LAST:event_detail1ButtonActionPerformed

    private void detail2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detail2ButtonActionPerformed
        JOptionPane.showMessageDialog(this, "This will show the processing detail, \n"
                + "but for now please see the History window");
    }//GEN-LAST:event_detail2ButtonActionPerformed

    private void detail3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detail3ButtonActionPerformed
        JOptionPane.showMessageDialog(this, "This will show the download plan, "
                + "for possible optimization,\n"
                + "but for now please see the History window");
    }//GEN-LAST:event_detail3ButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        stopTheJob();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton detail1Button;
    private javax.swing.JButton detail2Button;
    private javax.swing.JButton detail3Button;
    private javax.swing.JCheckBox downloadCheck;
    private javax.swing.JButton goButton;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox processCheck;
    private javax.swing.JProgressBar progressDownload;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JProgressBar progressProcess;
    private javax.swing.JProgressBar progressUpload;
    private javax.swing.JCheckBox shutdownCheck;
    private javax.swing.JButton stopButton;
    private javax.swing.JCheckBox uploadCheck;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    private void goProcessProject() {
        // delete previous report
        Stats.getInstance().getStatsFile().delete();
        // prepare the processing and start it in its own thread
        processAgent = new ProcessAgent();
        processAgent.setUpload(uploadCheck.isSelected());
        processAgent.setProcess(processCheck.isSelected());
        processAgent.setDownload(downloadCheck.isSelected());
        processAgent.setShutdown(shutdownCheck.isSelected());
        processingThread = new Thread(processAgent);
        processingThread.start();
        // start the timer for progress updates, also in its thread
        timer = new Timer(5000, this);
        timer.setInitialDelay(1000);
        timer.start();
    }

    @Override
    public void actionPerformed(ActionEvent evt) {
        progressUpload.setValue(processAgent.getUploadPercent());
        progressProcess.setValue(processAgent.getProcessPercent());
        SSHAgent sshAgent = processAgent.getSshAgent();
        if (sshAgent != null) {
            String lastLine = sshAgent.getLastOutputLine();
            logger.trace(lastLine);
        }
        progressDownload.setValue(processAgent.getDownloadPercent());
        if (processAgent.isDone()) {
            timer.stop();
        }
    }

    private boolean verifyProject() {
        Project project = Project.getCurrentProject();
        if (project.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Please open a project first");
            return false;
        }
        if (!project.hasStagedData()) {
            JOptionPane.showMessageDialog(rootPane, "Staging files not found, maybe you need to stage first");
            return false;
        }
        return true;
    }

    private void stopTheJob() {
        try {
            ProcessAgent terminator = new ProcessAgent();
            terminator.killAllJobs();
        } catch (Exception e) {
            e.printStackTrace(System.out);
        }
    }
}
