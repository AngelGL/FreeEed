/*
 *
 * Copyright SHMsoft, Inc. 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
package org.freeeed.ui;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.*;

import org.freeeed.services.Util;
import org.freeeed.services.Project;
import org.freeeed.services.Settings;

/**
 *
 * @author mark
 */
public class ProcessingParametersUI extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    /**
     * Creates new form ProcessingParametersUI
     */
    public ProcessingParametersUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {

            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchButtonGroup = new javax.swing.ButtonGroup();
        metadataButtonGroup = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        tabPanel = new javax.swing.JTabbedPane();
        inputsPanel = new javax.swing.JPanel();
        projectCodeLabel = new javax.swing.JLabel();
        projectCodeField = new javax.swing.JTextField();
        runText = new javax.swing.JTextField();
        projectNameLabel = new javax.swing.JLabel();
        projectNameField = new javax.swing.JTextField();
        projectInputsLabel = new javax.swing.JLabel();
        networkHelpLabel = new javax.swing.JLabel();
        addFileButton = new javax.swing.JButton();
        addNetworkButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        projectInputsScrollPanel = new javax.swing.JScrollPane();
        projectInputsList = new javax.swing.JList();
        runLabel = new javax.swing.JLabel();
        metadataPanel = new javax.swing.JPanel();
        fieldSeparatorLabel = new javax.swing.JLabel();
        fieldSeparatorChoice = new javax.swing.JComboBox();
        labelMetadataCollected = new javax.swing.JLabel();
        standardMetadataRadio = new javax.swing.JRadioButton();
        allMetadataRadio = new javax.swing.JRadioButton();
        denistCheck = new javax.swing.JCheckBox();
        textInMetadataBox = new javax.swing.JCheckBox();
        searchPanel = new javax.swing.JPanel();
        cullingLabel = new javax.swing.JLabel();
        helpLabel = new javax.swing.JLabel();
        cullingScrollPanel = new javax.swing.JScrollPane();
        cullingText = new javax.swing.JTextArea();
        specialPanel = new javax.swing.JPanel();
        skipLabel = new javax.swing.JLabel();
        skipText = new javax.swing.JTextField();
        stagingZipSizeLabel = new javax.swing.JLabel();
        stagingZipSizeText = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        createPdfImageCheckBox = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        addEmailAttachCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        ocrCheck = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        ocrMaxNumberOfImagesPerPDF = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        luceneIndexEnabledRadioButton = new javax.swing.JRadioButton();
        solrIndexEnabledRadioButton = new javax.swing.JRadioButton();
        noIndexCreationRadioButton = new javax.swing.JRadioButton();

        setTitle("Project Options");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        projectCodeLabel.setText("Project code");

        runText.setEditable(false);

        projectNameLabel.setText("Description");

        projectInputsLabel.setText("Add/Remove input data:");

        networkHelpLabel.setForeground(new java.awt.Color(0, 0, 255));
        networkHelpLabel.setText("Help");
        networkHelpLabel.setToolTipText("Click here for help on URI");
        networkHelpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                networkHelpLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                networkHelpLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                networkHelpLabelMousePressed(evt);
            }
        });

        addFileButton.setText("Add local folder or file");
        addFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileButtonActionPerformed(evt);
            }
        });

        addNetworkButton.setText("Add network (URI) location");
        addNetworkButton.setToolTipText("<html>Add network location in the URI format. <br />\nExample of ftp access: <br />\nftp://user:password@ftp.example.com/path/file.zip\n</html>");
        addNetworkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNetworkButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove");
        removeButton.setToolTipText("Remove local folder or network location from project inputs - \nthe data itself remains intact");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        projectInputsScrollPanel.setViewportView(projectInputsList);

        runLabel.setText("Run");

        javax.swing.GroupLayout inputsPanelLayout = new javax.swing.GroupLayout(inputsPanel);
        inputsPanel.setLayout(inputsPanelLayout);
        inputsPanelLayout.setHorizontalGroup(
            inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(inputsPanelLayout.createSequentialGroup()
                        .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectCodeLabel)
                            .addComponent(projectNameLabel))
                        .addGap(27, 27, 27)
                        .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputsPanelLayout.createSequentialGroup()
                                .addComponent(projectCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(88, 88, 88)
                                .addComponent(runLabel))
                            .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(inputsPanelLayout.createSequentialGroup()
                        .addComponent(projectInputsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(addNetworkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(networkHelpLabel)
                        .addGap(30, 30, 30)
                        .addComponent(removeButton)))
                .addContainerGap(57, Short.MAX_VALUE))
            .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(inputsPanelLayout.createSequentialGroup()
                    .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(inputsPanelLayout.createSequentialGroup()
                            .addGap(396, 396, 396)
                            .addComponent(runText, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(inputsPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(projectInputsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 25, Short.MAX_VALUE)))
        );
        inputsPanelLayout.setVerticalGroup(
            inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectCodeLabel)
                    .addComponent(projectCodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runLabel))
                .addGap(18, 18, 18)
                .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectNameLabel)
                    .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectInputsLabel)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addNetworkButton)
                    .addComponent(addFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(networkHelpLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(507, Short.MAX_VALUE))
            .addGroup(inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(inputsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(runText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 204, Short.MAX_VALUE)
                    .addComponent(projectInputsScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        tabPanel.addTab("Inputs", inputsPanel);

        fieldSeparatorLabel.setText("Field separator");

        labelMetadataCollected.setText("Metadata collected");

        metadataButtonGroup.add(standardMetadataRadio);
        standardMetadataRadio.setSelected(true);
        standardMetadataRadio.setText("Standard");

        metadataButtonGroup.add(allMetadataRadio);
        allMetadataRadio.setText("All");

        denistCheck.setSelected(true);
        denistCheck.setText("Remove system files");

        textInMetadataBox.setText("Insert text in metadata");
        textInMetadataBox.setToolTipText("Useful for Concordance and Hive load");

        javax.swing.GroupLayout metadataPanelLayout = new javax.swing.GroupLayout(metadataPanel);
        metadataPanel.setLayout(metadataPanelLayout);
        metadataPanelLayout.setHorizontalGroup(
            metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metadataPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textInMetadataBox)
                    .addComponent(denistCheck)
                    .addGroup(metadataPanelLayout.createSequentialGroup()
                        .addComponent(labelMetadataCollected)
                        .addGap(36, 36, 36)
                        .addComponent(standardMetadataRadio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(allMetadataRadio))
                    .addGroup(metadataPanelLayout.createSequentialGroup()
                        .addComponent(fieldSeparatorLabel)
                        .addGap(38, 38, 38)
                        .addComponent(fieldSeparatorChoice, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(453, Short.MAX_VALUE))
        );
        metadataPanelLayout.setVerticalGroup(
            metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(metadataPanelLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldSeparatorLabel)
                    .addComponent(fieldSeparatorChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(metadataPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelMetadataCollected)
                    .addComponent(standardMetadataRadio)
                    .addComponent(allMetadataRadio))
                .addGap(30, 30, 30)
                .addComponent(denistCheck)
                .addGap(18, 18, 18)
                .addComponent(textInMetadataBox)
                .addContainerGap(409, Short.MAX_VALUE))
        );

        tabPanel.addTab("Metadata", metadataPanel);

        cullingLabel.setText("Culling expressions");

        helpLabel.setForeground(new java.awt.Color(0, 0, 255));
        helpLabel.setText("Help");
        helpLabel.setToolTipText("<html>Each line is treated as a separate keyword or search expression<br>\nAll lines are considered as connected by a non-exclusive \"OR\"<br>\nField names are required, so for example you can have<br><br>\ncontent:email<br>\ncontent:data<br>\ntitle:meeting<br><br>\nFor the syntax of search expressions click on this \"Help\"</html>");
        helpLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                helpLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                helpLabelMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                helpLabelMousePressed(evt);
            }
        });

        cullingText.setColumns(20);
        cullingText.setRows(5);
        cullingScrollPanel.setViewportView(cullingText);

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cullingScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 737, Short.MAX_VALUE)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addComponent(cullingLabel)
                        .addGap(18, 18, 18)
                        .addComponent(helpLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cullingLabel)
                    .addComponent(helpLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cullingScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanel.addTab("Culling", searchPanel);

        skipLabel.setText("Skip files for sampling (testing only!)");

        stagingZipSizeLabel.setText("Staging zip size, GB");

        javax.swing.GroupLayout specialPanelLayout = new javax.swing.GroupLayout(specialPanel);
        specialPanel.setLayout(specialPanelLayout);
        specialPanelLayout.setHorizontalGroup(
            specialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(specialPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(specialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(specialPanelLayout.createSequentialGroup()
                        .addComponent(stagingZipSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stagingZipSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(specialPanelLayout.createSequentialGroup()
                        .addComponent(skipLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(skipText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(475, Short.MAX_VALUE))
        );
        specialPanelLayout.setVerticalGroup(
            specialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(specialPanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(specialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stagingZipSizeLabel)
                    .addComponent(stagingZipSizeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(specialPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skipLabel)
                    .addComponent(skipText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(526, Short.MAX_VALUE))
        );

        tabPanel.addTab("Staging", specialPanel);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Imaging Properties"));

        createPdfImageCheckBox.setText("Create PDF Images, multi-page, for every file");

        jLabel2.setText("Control PDF image creation by changing the properties below");

        addEmailAttachCheckBox.setText("Add email attachments to image");
        addEmailAttachCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmailAttachCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addEmailAttachCheckBox)
                    .addComponent(jLabel2)
                    .addComponent(createPdfImageCheckBox))
                .addContainerGap(237, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(createPdfImageCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addEmailAttachCheckBox)
                .addContainerGap(96, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(383, Short.MAX_VALUE))
        );

        tabPanel.addTab("Imaging", jPanel1);

        ocrCheck.setSelected(true);
        ocrCheck.setText("Perform OCR");

        jLabel1.setText("Max. number of images per PDF:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ocrCheck)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ocrMaxNumberOfImagesPerPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(464, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(ocrCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ocrMaxNumberOfImagesPerPDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(536, Short.MAX_VALUE))
        );

        tabPanel.addTab("OCR", jPanel3);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Index options"));

        searchButtonGroup.add(luceneIndexEnabledRadioButton);
        luceneIndexEnabledRadioButton.setText("Create Lucene index (for geeks)");

        searchButtonGroup.add(solrIndexEnabledRadioButton);
        solrIndexEnabledRadioButton.setText("Prepare Solr search");

        searchButtonGroup.add(noIndexCreationRadioButton);
        noIndexCreationRadioButton.setSelected(true);
        noIndexCreationRadioButton.setText("No Search");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(luceneIndexEnabledRadioButton)
                        .addGap(0, 373, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(noIndexCreationRadioButton)
                            .addComponent(solrIndexEnabledRadioButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(noIndexCreationRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solrIndexEnabledRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(luceneIndexEnabledRadioButton)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(167, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(459, Short.MAX_VALUE))
        );

        tabPanel.addTab("Search", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tabPanel)
                        .addContainerGap())))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (collectData() == false) {
            return;
        }
        if (checkNewProject() == false) {
            return;
        }
        Project.getProject().save();
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void helpLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMouseEntered
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_helpLabelMouseEntered

    private void helpLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_helpLabelMouseExited

    private void helpLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLabelMousePressed
        openLuceneSyntaxBrowser();
    }//GEN-LAST:event_helpLabelMousePressed

    private void networkHelpLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkHelpLabelMouseEntered
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_networkHelpLabelMouseEntered

    private void networkHelpLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkHelpLabelMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_networkHelpLabelMouseExited

    private void networkHelpLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_networkHelpLabelMousePressed
        openUriSyntaxBrowser();
    }//GEN-LAST:event_networkHelpLabelMousePressed

    private void addFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileButtonActionPerformed
        addFileInput();
    }//GEN-LAST:event_addFileButtonActionPerformed

    private void addNetworkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNetworkButtonActionPerformed
        addUriInput();
    }//GEN-LAST:event_addNetworkButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        removeInput();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void addEmailAttachCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmailAttachCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addEmailAttachCheckBoxActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProcessingParametersUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProcessingParametersUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProcessingParametersUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcessingParametersUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ProcessingParametersUI dialog = new ProcessingParametersUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addEmailAttachCheckBox;
    private javax.swing.JButton addFileButton;
    private javax.swing.JButton addNetworkButton;
    private javax.swing.JRadioButton allMetadataRadio;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox createPdfImageCheckBox;
    private javax.swing.JLabel cullingLabel;
    private javax.swing.JScrollPane cullingScrollPanel;
    private javax.swing.JTextArea cullingText;
    private javax.swing.JCheckBox denistCheck;
    private javax.swing.JComboBox fieldSeparatorChoice;
    private javax.swing.JLabel fieldSeparatorLabel;
    private javax.swing.JLabel helpLabel;
    private javax.swing.JPanel inputsPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel labelMetadataCollected;
    private javax.swing.JRadioButton luceneIndexEnabledRadioButton;
    private javax.swing.ButtonGroup metadataButtonGroup;
    private javax.swing.JPanel metadataPanel;
    private javax.swing.JLabel networkHelpLabel;
    private javax.swing.JRadioButton noIndexCreationRadioButton;
    private javax.swing.JCheckBox ocrCheck;
    private javax.swing.JTextField ocrMaxNumberOfImagesPerPDF;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField projectCodeField;
    private javax.swing.JLabel projectCodeLabel;
    private javax.swing.JLabel projectInputsLabel;
    private javax.swing.JList projectInputsList;
    private javax.swing.JScrollPane projectInputsScrollPanel;
    private javax.swing.JTextField projectNameField;
    private javax.swing.JLabel projectNameLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel runLabel;
    private javax.swing.JTextField runText;
    private javax.swing.ButtonGroup searchButtonGroup;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel skipLabel;
    private javax.swing.JTextField skipText;
    private javax.swing.JRadioButton solrIndexEnabledRadioButton;
    private javax.swing.JPanel specialPanel;
    private javax.swing.JLabel stagingZipSizeLabel;
    private javax.swing.JTextField stagingZipSizeText;
    private javax.swing.JRadioButton standardMetadataRadio;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JCheckBox textInMetadataBox;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    private void openLuceneSyntaxBrowser() {
        String url = "http://lucene.apache.org/core/old_versioned_docs/versions/3_5_0/queryparsersyntax.html";
        UtilUI.openBrowser(null, url);
    }

    private void openUriSyntaxBrowser() {
        String url = "http://en.wikipedia.org/wiki/URI_scheme#Generic_syntax";
        UtilUI.openBrowser(null, url);
    }

    private void showData() {
        showProjectInputs();
        showProcessingParametersData();
    }

    @SuppressWarnings("unchecked")
    private void showProjectInputs() {
        Project project = Project.getProject();
        setTitle("Settings for project " + project.getProjectName());
        projectCodeField.setText(project.getProjectCode());
        projectNameField.setText(project.getProjectName());
        runText.setText(project.getRun());

        DefaultListModel model = new DefaultListModel();
        String[] dirs = project.getInputs();
        String[] custodians = project.getCustodians(dirs);
        if (dirs != null) {
            for (int i = 0; i < dirs.length; ++i) {
                String custodian = i < custodians.length ? custodians[i] : "";
                String line = custodian + ": " + dirs[i];
                model.addElement(line.trim());
            }
        }
        int projectInputs = (dirs != null ? dirs.length : 0);
        projectInputsLabel.setText("Project inputs (" + projectInputs + ")");
        projectInputsList.setModel(model);
        cullingText.setText(project.getCullingAsTextBlock());
        String envSetting = Settings.getSettings().getEnv();
        project.setEnvironment(envSetting);
    }

    private boolean collectData() {
        boolean result = collectProjectInputs();
        if (result == false) {
            return false;
        }
        result = collectProcessingParametersData();
        if (result == false) {
            return false;
        }
        return true;
    }

    private boolean collectProjectInputs() {
        Project project = Project.getProject();
        project.setProjectName(projectNameField.getText());
        ListModel model = projectInputsList.getModel();
        String[] dirs = new String[model.getSize()];
        String[] custodians = new String[model.getSize()];
        for (int i = 0; i < model.getSize(); ++i) {
            String line = (String) model.getElementAt(i);
            int twodots = line.indexOf(":");
            String custodian = line.substring(0, twodots);
            String uri = line.substring(twodots + 2);
            custodians[i] = custodian.trim();
            dirs[i] = uri.trim();
        }
        project.setInputs(dirs);
        project.setCustodians(custodians);
        project.setEnvironment("local");
        project.setCulling(cullingText.getText());
        return true;
    }

    private void removeInput() {
        int index = projectInputsList.getSelectedIndex();
        if (index >= 0) {
            ((DefaultListModel) projectInputsList.getModel()).remove(index);
        }
        projectInputsLabel.setText("Project inputs ("
                + projectInputsList.getModel().getSize() + ")");
    }

    @SuppressWarnings("unchecked")
    private void addFileInput() {
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        File f = null;
        Settings settings = Settings.getSettings();
        if (settings.getCurrentDir() != null) {
            f = new File(settings.getCurrentDir());
        } else {
            try {
                f = new File(new File(".").getCanonicalPath());
            } catch (IOException e) {
                e.printStackTrace(System.out);
            }
        }
        chooser.setCurrentDirectory(f);
        chooser.showOpenDialog(this);
        File file = chooser.getSelectedFile();
        if (file == null) {
            return;
        }
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this, "File does not exist:\n" + file.getPath());
            return;
        }
        String custodian = JOptionPane.showInputDialog("Please enter custodian");
        if (custodian == null) {
            return;
        }
        ((DefaultListModel) projectInputsList.getModel()).addElement(custodian + ": " + file.getPath());
        projectInputsLabel.setText("Project inputs ("
                + projectInputsList.getModel().getSize() + ")");
    }

    @SuppressWarnings("unchecked")
    private void addUriInput() {
        String uri = JOptionPane.showInputDialog(this, "Enter input's network locations as URI");
        if (uri == null) {
            return;
        }
        // TODO verify URI?        
        String custodian = JOptionPane.showInputDialog("Please enter custodian");
        if (custodian == null) {
            return;
        }
        ((DefaultListModel) projectInputsList.getModel()).addElement(custodian + ": " + uri);
    }

    private void showProcessingParametersData() {
        Project project = Project.getProject();
        int index = 0;
        String fieldSeparator = project.getFieldSeparator();
        if ("tab".equals(fieldSeparator)) {
            index = 0;
        } else if ("hex_one".equals(fieldSeparator)) {
            index = 1;
        } else if ("pipe".equals(fieldSeparator)) {
            index = 2;
        } else if ("carret".equals(fieldSeparator)) {
            index = 3;
        }
        fieldSeparatorChoice.setSelectedIndex(index);
        allMetadataRadio.setSelected("all".equals(project.getMetadataCollect()));
        standardMetadataRadio.setSelected("standard".equals(project.getMetadataCollect()));
        denistCheck.setSelected(project.isRemoveSystemFiles());
        textInMetadataBox.setSelected(project.isTextInMetadata());
        stagingZipSizeText.setText(Double.toString(project.getGigsPerArchive()));
        ocrCheck.setSelected(project.isOcrEnabled());
        
        luceneIndexEnabledRadioButton.setSelected(project.isLuceneFSIndexEnabled());
        solrIndexEnabledRadioButton.setSelected(project.isSendIndexToSolrEnabled());
        if (!project.isLuceneFSIndexEnabled() && !project.isSendIndexToSolrEnabled()) {
            noIndexCreationRadioButton.setSelected(true);
        }
        
        createPdfImageCheckBox.setSelected(project.isCreatePDF());
        ocrMaxNumberOfImagesPerPDF.setText("" + project.getOcrMaxImagesPerPDF());
        addEmailAttachCheckBox.setSelected(project.isAddEmailAttachmentToPDF());
    }

    private boolean collectProcessingParametersData() {
        Project project = Project.getProject();
        try {
            int index = fieldSeparatorChoice.getSelectedIndex();
            switch (index) {
                case 0:
                    project.setFieldSeparator("tab");
                    break;
                case 1:
                    project.setFieldSeparator("hex_one");
                    break;
                case 2:
                    project.setFieldSeparator("pipe");
                    break;
                case 3:
                    project.setFieldSeparator("carret");
                    break;
            }
            project.setMetadataCollect(
                    standardMetadataRadio.isSelected() ? "standard" : "all");
            project.setRemoveSystemFiles(denistCheck.isSelected());
            project.setTextInMetadata(textInMetadataBox.isSelected());
            project.setGigsPerArchive(Double.parseDouble(stagingZipSizeText.getText()));
            project.setOcrEnabled(ocrCheck.isSelected());
            project.setLuceneFSIndexEnabled(luceneIndexEnabledRadioButton.isSelected());
            project.setSendIndexToSolrEnabled(solrIndexEnabledRadioButton.isSelected());
            project.setCreatePDF(createPdfImageCheckBox.isSelected());
            project.setOcrMaxImagesPerPDF(Integer.parseInt(ocrMaxNumberOfImagesPerPDF.getText()));
            project.setAddEmailAttachmentToPDF(addEmailAttachCheckBox.isSelected());
            
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    @Override
    public void setVisible(boolean b) {
        if (b) {
            Project project = Project.getProject();
            if (project == null) {
                JOptionPane.showMessageDialog(rootPane, "Create or open a project first");
                return;
            }
            myInit();
            projectCodeField.setEnabled(false);
            showData();
        }
        super.setVisible(b);
    }

    private void myInit() {
        fieldSeparatorChoice.removeAllItems();
        fieldSeparatorChoice.addItem("tab (\\t)");
        fieldSeparatorChoice.addItem("non-ascii one (x0001)");
        fieldSeparatorChoice.addItem("pipe (|)");
        fieldSeparatorChoice.addItem("carret (^)");
    }

    private boolean checkNewProject() {
        Project project = Project.getProject();
        if (project.getProjectFilePath() != null) {
            return true;
        }
        String currentDir = Settings.getSettings().getCurrentDir();
        if (currentDir == null) {
            currentDir = ".";
        }
        //Create a file chooser
        final JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(currentDir));
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.CANCEL_OPTION) {
            return false;
        }
        File saveFileAs = fileChooser.getSelectedFile();
        if (saveFileAs == null) {
            return false;
        }
        String saveFilePath = saveFileAs.getPath();
        if (!"project".equalsIgnoreCase(Util.getExtension(saveFilePath))) {
            saveFilePath = saveFilePath + ".project";
        }
        project.setProjectFilePath(saveFilePath);
        return true;
    }
}
